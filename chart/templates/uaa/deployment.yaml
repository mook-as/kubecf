{{- $_ := include "_config.load" . }}
{{- if .Values.features.uaa.native }}

{{- $uaa_image := "" }}
{{- $uaa_init_image := "" }}
{{- with .Values.features.uaa }}
  {{- if hasPrefix "@" .image_tag }}
    {{- $uaa_image = printf "%s%s" .image .image_tag }}
  {{- else }}
    {{- $uaa_image = printf "%s:%s" .image .image_tag }}
  {{- end }}
  {{- if hasPrefix "@" .init_image_tag }}
    {{- $uaa_init_image = printf "%s%s" .init_image .init_image_tag }}
  {{- else }}
    {{- $uaa_init_image = printf "%s:%s" .init_image .init_image_tag }}
  {{- end }}
{{- end }}

{{- $secrets := list }}
{{- $secrets = append $secrets "var-cf-admin-password" }}
{{- $secrets = append $secrets "var-credhub-admin-client-secret" }}
{{- $secrets = append $secrets "var-credhub-setup-client-secret" }}
{{- $secrets = append $secrets "var-uaa-admin-client-secret" }}
{{- $secrets = append $secrets "var-uaa-ca" }}
{{- $secrets = append $secrets "var-uaa-clients-cc-routing-secret" }}
{{- $secrets = append $secrets "var-uaa-clients-cc-service-dashboards-secret" }}
{{- $secrets = append $secrets "var-uaa-clients-cc-service-key-client-secret" }}
{{- $secrets = append $secrets "var-uaa-clients-cf-smoke-tests-secret" }}
{{- $secrets = append $secrets "var-uaa-clients-cloud-controller-username-lookup-secret" }}
{{- $secrets = append $secrets "var-uaa-clients-doppler-secret" }}
{{- $secrets = append $secrets "var-uaa-clients-gorouter-secret" }}
{{- $secrets = append $secrets "var-uaa-clients-network-policy-secret" }}
{{- $secrets = append $secrets "var-uaa-clients-routing-api-client-secret" }}
{{- $secrets = append $secrets "var-uaa-clients-ssh-proxy-secret" }}
{{- $secrets = append $secrets "var-uaa-clients-tcp-emitter-secret" }}
{{- $secrets = append $secrets "var-uaa-clients-tcp-router-secret" }}
{{- $secrets = append $secrets "var-uaa-database-password" }}
{{- $secrets = append $secrets "var-uaa-default-encryption-passphrase" }}
{{- $secrets = append $secrets "var-uaa-jwt-signing-key" }}
{{- $secrets = append $secrets "var-uaa-login-saml" }}
{{- $secrets = append $secrets "var-uaa-setup-client-secret" }}
{{- $secrets = append $secrets "var-uaa-ssl" }}
{{- $secrets = append $secrets "with-ops" }}
{{- if not .Values.features.ingress.enabled }}
{{- $secrets = append $secrets "var-nats-password" }}
{{- end }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ .Release.Namespace | quote }}
  name: uaa
  labels:
    {{- list $ "uaa" | include "kubecf.component.labels" | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- list $ "uaa" | include "kubecf.component.selector" | nindent 6 }}
  replicas: 1
  template:
    metadata:
      labels:
        {{- list $ "uaa" | include "kubecf.component.labels" | nindent 8 }}
      annotations:
        # Require NATS for route-registrar
        quarks.cloudfoundry.org/wait-for: '[ "database", "nats" ]'
    spec:
      serviceAccountName: uaa
      initContainers:
      - name: generate-nginx-config
        image: {{ $uaa_init_image }}
        command:
        - /bin/bash
        - -c
        - |-
          {{- .Files.Get "assets/scripts/helm/uaa/generate-nginx-config.sh" | nindent 10 }}
        volumeMounts:
        - name: nginx-config
          mountPath: /run/nginx-config
        - name: var-uaa-ssl
          mountPath: /run/secrets/uaa-ssl
      - name: generate-uaa-config
        image: {{ $uaa_init_image }}
        {{- $dburl := printf "jdbc:mysql://database.%s.svc:3306/uaa" .Release.Namespace }}
        {{- $db_adapter := "mysql" }}
        {{- if .Values.features.embedded_database.enabled | not }}
          {{- with .Values.features.external_database }}
            {{- $dburl = printf "jdbc:%s://%s:%s" .type .host .port }}
            {{- $db_adapter = .type }}
          {{- end }}
        {{- end }}
        command:
        - /usr/bin/ruby
        - -e
        - |-
          {{- .Files.Get "assets/scripts/helm/uaa/generate-uaa-config.rb" | nindent 10 }}
        env:
        - name: DB_ADAPTER
          value: {{ $db_adapter | quote }}
        - name: DB_URL
          value: {{ $dburl | quote }}
        - name: SYSTEM_DOMAIN
          value: {{ .Values.system_domain | quote }}
        volumeMounts:
        - name: uaa-config
          mountPath: /etc/config
        {{- range $secrets }}
        - name: {{ . }}
          mountPath: /run/secrets/{{ . }}
        {{- end }}
      {{- if not .Values.features.ingress.enabled }}
      - name: generate-route-registrar-config
        image: {{ $uaa_init_image }}
        command:
        - /usr/bin/ruby
        - -e
        - |
          {{- .Files.Get "assets/scripts/helm/uaa/generate-route-registrar-config.rb" | nindent 10 }}
        env:
        - name: SYSTEM_DOMAIN
          value: {{ .Values.system_domain | quote }}
        volumeMounts:
        - name: route-registrar-config
          mountPath: /run/config
        - name: var-nats-password
          mountPath: /run/secrets/var-nats-password
      {{- end }}{{/* not .Values.features.ingress.enabled */}}
      - name: generate-log-config
        image: {{ $uaa_image }}
        command:
        - sh
        - -c
        - |
          {{- .Files.Get "assets/scripts/helm/uaa/generate-log-config.sh" | nindent 10 }}
        volumeMounts:
        - name: uaa-config
          mountPath: /etc/config
      - name: build-uaa-truststore
        image: {{ $uaa_image }}
        command:
        - 'bash'
        - '-c'
        - |
          {{- .Files.Get "assets/scripts/helm/uaa/build-uaa-truststore.sh" | nindent 10 }}
        env:
        - name: TRUSTSTORE_FILE
          value: /etc/truststore/uaa.pkcs12.truststore
        - name: TRUSTSTORE_PASSWORD
          value: changeit # XXX CHANGE ME
        - name: JAVA_HOME
          value: /layers/paketo-buildpacks_bellsoft-liberica/jre
        - name: OS_CERTS_DIR
          value: /etc/ssl/certs
        volumeMounts:
        - name: truststore-file
          mountPath: /etc/truststore
      containers:
      - name: uaa
        image: {{ $uaa_image }}
        resources:
          requests:
            memory: {{ .Values.sizing.uaa.resources.requests.memory }}
            cpu: {{ .Values.sizing.uaa.resources.requests.cpu }}
        ports:
        - name: http-uaa
          containerPort: 8080
          protocol: TCP
        env:
        - name: BPL_TOMCAT_ACCESS_LOGGING
          value: "y" # XXX change me
        - name: CATALINA_OUT
          value: /proc/self/fd/1
        - name: JAVA_OPTS
          # XXX change trust store password
          value: >-
            -Djava.security.egd=file:/dev/urandom
            -Dlogging.config=/etc/config/log4j2.properties
            -Dlog4j.configurationFile=/etc/config/log4j2.properties
            -DCLOUDFOUNDRY_CONFIG_PATH=/etc/config
            -DSECRETS_DIR=/etc/secrets
            -Djavax.net.ssl.trustStore=/etc/truststore/uaa.pkcs12.truststore
            -Djavax.net.ssl.trustStoreType=PKCS12
            -Djavax.net.ssl.trustStorePassword=changeit
            -Dstatsd.enabled=true
        volumeMounts:
        - name: uaa-config
          mountPath: /etc/config
        - name: truststore-file
          mountPath: /etc/truststore
          readOnly: true
        livenessProbe:
          httpGet:
            path: /healthz
            port: http-uaa
          failureThreshold: 25
          initialDelaySeconds: 60
          periodSeconds: 15
        readinessProbe:
          httpGet:
            path: /healthz
            port: http-uaa
      - name: ssl-endpoint
        image: nginx:stable
        ports:
        - name: ssl-uaa
          containerPort: 8443
          protocol: TCP
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx
          readOnly: true
      {{- if not .Values.features.ingress.enabled }}
      - name: route-registrar
        # XXX FIXME: Get rid of the route registrar (because we should be using
        # proper ingress into the deployment)
        image: >-
          {{- with .Values.releases.routing }}
            {{ printf "%s/routing:%s-%s-%s" .url .stemcell.os .stemcell.version .version }}
          {{- end }}
        command: [ /usr/bin/dumb-init, -- ]
        args:
        - /var/vcap/packages/route_registrar/bin/route-registrar
        - --configPath
        - /run/config/registrar_settings.json
        - -timeFormat
        - rfc3339
        - -logLevel
        - info
        volumeMounts:
        - name: route-registrar-config
          mountPath: /run/config
          readOnly: true
      {{- end }}
      volumes:
      - name: nginx-config
        emptyDir: {}
      - name: uaa-config
        emptyDir: {}
      {{- if not .Values.features.ingress.enabled }}
      - name: route-registrar-config
        emptyDir: {}
      {{- end }}
      - name: truststore-file
        emptyDir: {}
      {{- range $secrets }}
      - name: {{ . }}
        secret:
          secretName: {{ . }}
      {{- end }}
{{- end }}
